#!/usr/bin/perl

#
# Copyright (C) 2013 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use esmith::ConfigDB;
use Getopt::Std;

my %opts;
my @extraArgs;
my $crtFile = "/etc/pki/tls/certs/NSRV.crt";
my $keyFile = "/etc/pki/tls/private/NSRV.key";

getopts('f:sh', \%opts);

sub usage()
{
    warn qq( 
pki-gencrt: Generate NethServer default certificate 
            from OrganizationContact key in configuration 
            database. 

Usage:
   pki-gencrt [-s] [-f <filename>] [-h]

   -s Print the certificate subject line
   -f Set output to <filename> (Default is $crtFile)
   -h this help

) . "\n";
}

if($opts{'h'}) { 
    usage();
    exit(0);
}

if($opts{'f'}) {
    $crtFile = $opts{'f'};
} else {
    usage();
    exit(1);
}

if ( ! -r $keyFile ) {
    die("Could not read $keyFile\n");
}


sub get_generate_args()
{

    my $configDb = esmith::ConfigDB->open_ro() || die("Could not open ConfigDB");
    my $pki = {$configDb->get('pki')->props};
    my $org = {$configDb->get('OrganizationContact')->props};
    my $certificateDuration = $pki->{CertificateDuration} || "30";
    
    if ($certificateDuration < 7) {
	warn "[WARNING] pki CertificateDuration is less than 7 days! Check configuration DB.\n";
    }
    
    my $fqdn = join('.', $configDb->get_value('SystemName'), $configDb->get_value('DomainName'));

    my %params = (
	'C' => substr($pki->{CountryCode} || $org->{CountryCode} || '--', 0, 2),
	'ST' => substr($pki->{State} || $org->{State} || 'SomeState', 0, 32),
	'L' => substr($pki->{Locality} || $org->{City} || 'SomeLocality', 0, 64),
	'O' => substr($pki->{Organization} || $org->{Company} || 'SomeOrganization', 0, 64),
	'OU' => substr($pki->{OrganizationalUnitName} || $org->{Department} || 'SomeOrganizationalUnit', 0, 64),
	'CN' => substr($pki->{CommonName} || 'NethServer', 0, 64),
	'emailAddress' => substr($pki->{EmailAddress} || ('root@' . $fqdn), 0, 64),
	$pki->{SubjectAltName} ? ('subjectAltName' => $pki->{SubjectAltName}) : ()
	);
   
    my $subj = '/' . join('/', map { sprintf("%s=%s", $_, $params{$_}); } keys %params);

    return (
	'req',
	'-x509',
	'-sha256',
	'-days', $certificateDuration,
	'-utf8',
	'-new', 
	'-key', $keyFile,
	'-set_serial', time(),       
	'-out', $crtFile, 
	'-subj', $subj
	);
}


sub get_subject_args()
{
    return qw(x509 -noout -subject -in), $crtFile;
}

exec('/usr/bin/openssl', $opts{'s'} ? get_subject_args() : get_generate_args());
