#!/usr/bin/perl

#
# Copyright (C) 2013 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use esmith::DB::db;
use esmith::event;
use File::Copy;
use File::Basename;
use NethServer::Migrate;
use strict;

my $event = shift;
my $sourceDir = shift;
my $esmithDbDir = '/home/e-smith/db';
my $errors = 0;
if( ! -d $sourceDir) {
    die("Could not find dir $sourceDir");
}

my $srcConfigDb = esmith::DB::db->open_ro(join('', $sourceDir, $esmithDbDir, '/configuration')) || die("Could not open source configuration database in $sourceDir \n");
my $dstConfigDb = esmith::DB::db->open('configuration') || die("Could not open destination account db\n");
my $srcNetworkDb = esmith::DB::db->open_ro(join('', $sourceDir, $esmithDbDir, '/networks')) || die("Could not open source networks db in $sourceDir \n");
my $dstNetworkDb = esmith::DB::db->open('networks') || die("Could not open destination networks db\n");
my $routesDb = esmith::DB::db->open('routes') || die("Could not open destination routes db\n");


my $service = 'passwordstrength';
my $old = $srcConfigDb->get($service);
my $new = $dstConfigDb->get($service) || $dstConfigDb->new_record($service);
$new->merge_props($old->props);

my @keys = ('MinUid', 'maxAcctNameLength', 'maxGroupNameLength');
foreach my $key (@keys) {
    $old = $srcConfigDb->get($key);
    $new = $dstConfigDb->get($key) || $dstConfigDb->new_record($key);
    $new->set_prop('type',$old->prop('type'));
}

if( ! esmith::event::event_signal('password-policy-update')) {
    warn "[WARNING] Errors during password-policy-update event";
    $errors++;
}



$old = $srcConfigDb->get('ldap');
$new = $dstConfigDb->get('OrganizationContact') || $dstConfigDb->new_record('OrganizationContact');
$new->set_prop('City',$old->prop('defaultCity') || "");
$new->set_prop('Company',$old->prop('defaultCompany') || "");
$new->set_prop('Department',$old->prop('defaultDepartment') || "");
$new->set_prop('PhoneNumber',$old->prop('defaultPhoneNumber') || "");
$new->set_prop('Street',$old->prop('defaultStreet') || "");

$old = $srcConfigDb->get('modSSL');
$new = $dstConfigDb->get('pki') || $dstConfigDb->new_record('pki');
my $crt = $old->prop('crt') || "";
my $key = $old->prop('key') || "";
my $oldKey = '/home/e-smith/ssl.key/'.$srcConfigDb->get('SystemName')->prop('type').".".$srcConfigDb->get('DomainName')->prop('type').'.key';
my $oldCrt = '/home/e-smith/ssl.crt/'.$srcConfigDb->get('SystemName')->prop('type').".".$srcConfigDb->get('DomainName')->prop('type').'.crt';
my $oldPem = '/home/e-smith/ssl.pem/'.$srcConfigDb->get('SystemName')->prop('type').".".$srcConfigDb->get('DomainName')->prop('type').'.pem';

# copy default self-signed cert and key
if ($crt eq "" && $key eq "") {
    $new->set_prop('CrtFile','');
    $new->set_prop('KeyFile','');
    copy("$sourceDir/$oldKey","/etc/pki/tls/private/NSRV.key");
    copy("$sourceDir/$oldCrt","/etc/pki/tls/certs/NSRV.crt");
    if ( -f "$sourceDir/$oldPem") { 
        copy("$sourceDir/$oldPem","/etc/pki/tls/NSRV.pem");
    }
} else {  # copy custom cert and key
    if ($key eq '') {
        $key = $oldKey;
    }
    $oldKey = basename($key);
    if ($crt eq '') {
        $crt = $oldCrt;
    }
    $oldCrt = basename($crt);
    $new->set_prop('KeyFile',"/etc/pki/tls/private/$oldKey");
    $new->set_prop('CrtFile',"/etc/pki/tls/certs/$oldCrt");
    copy("$sourceDir/$key","/etc/pki/tls/private/$oldKey");
    copy("$sourceDir/$crt","/etc/pki/tls/certs/$oldCrt");
}


my $chain = $old->prop("CertificateChainFile") || "";
if ($chain ne "") { 
    copy("$sourceDir/$chain","/etc/pki/tls/".basename($chain));
    $new->set_prop('ChainFile',"/etc/pki/tls/".basename($chain));
}

#
# BEGIN static routes and trusted networks migration
#

my @srcNetworks = $srcNetworkDb->get_all_by_prop(type=>'network');

my $mustRestartNetwork = 0;

foreach my $srcNetwork (@srcNetworks) {
    my $network = $srcNetwork->key;

    my $local = $srcNetwork->prop('SystemLocalNetwork') || '';
    my $router = $srcNetwork->prop('Router') || '';

    # skip SystemLocalNetwork, is calculted on-the-fly when needed
    if ($local eq 'yes') {
        next;
    }

    # skip an existing network
    if($dstNetworkDb->get($network)) {
        warn "[WARNING] Network $network is already registered in networks DB\n";
        next;
    }
    $dstNetworkDb->set_prop($network, 'Mask', $srcNetwork->prop('Mask'), type => 'network');

    $mustRestartNetwork = 1;

    # create static route
    if ($router ne '') {
         # skip an existing routes
        if($routesDb->get($network)) {
            warn "[WARNING] Route $network is already registered in routes DB\n";
            next;
        }
        $routesDb->set_prop($network, 'Mask',  $srcNetwork->prop('Mask'), type => 'static');
        $routesDb->set_prop($network, 'Router', $router);
        $routesDb->set_prop($network, 'Description', 'Migrated from local network');
    }

}

if($mustRestartNetwork) {
    if( ! esmith::event::event_signal('static-routes-save')) {
	warn "[WARNING] Errors during static-routes-save event";
	$errors++;
    }
    if( ! esmith::event::event_signal('interface-update')) {
	warn "[WARNING] Errors during interface-update event";
	$errors++;
    }
}


#
# END static routes and trusted networks migration
#


# copy root files, but first save exiting logs in /root/logs
mkdir("/root/logs");
while (</root/*.log>) {
   move($_,"/root/logs");
}
while (</root/*.syslog>) {
   move($_,"/root/logs");
}

# move out my.cnf to avoid problems during mysql migration
if (-f "$sourceDir/root/.my.cnf") {
   move("$sourceDir/root/.my.cnf","/tmp/my.cnf.bak")
}

# cleanup destination .ssh directory
system('rm -rf /root/.ssh');

NethServer::Migrate::migrateDir("$sourceDir/root","/root");

# restore my.cnf position
if (-f "/tmp/my.cnf.bak") {
    move("/tmp/my.cnf.bak", "$sourceDir/root/.my.cnf")
}

exit($errors > 0 ? 1 : 0);
