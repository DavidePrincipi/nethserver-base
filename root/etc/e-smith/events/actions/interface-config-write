#!/usr/bin/perl

#
# interface-config-write -- remove ifcfg-* interface configurations
#

#
# Copyright (C) 2012 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#


use esmith::NetworksDB;
use esmith::ConfigDB;
use strict;

our $output_dir = $output_dir || $ENV{ESMITH_NETWORK_OUT_DIR} || "/etc/sysconfig/network-scripts";
my $idb = esmith::NetworksDB->open_ro();
my $rdb = esmith::ConfigDB->open_ro('routes');
my @interfaces = $idb->interfaces;

foreach my $i (@interfaces) {
    _write_config_file($i);
}


foreach my $i (@interfaces) {
    my $file = sprintf "%s/route-%s", $output_dir, $i->key;
    if ( -f $file ) {
        unlink($file);
    }
}

sub write_route {
    my $file = shift;
    my $cidr = shift;
    my $router = shift;
    my $dev = shift || '';
    if ($dev) {
        $dev = "dev $dev";
    }
    my $metric = shift || '';
    if ($metric) {
        $metric = "metric $metric";
    }

    open (my $fh, '>>', $file);
    print $fh "$cidr via $router $dev $metric \n";
    close ($fh);
}

sub write_default_route {
    my $router = shift;
    my $dev = shift;

    my $file = sprintf "%s/route-%s", $output_dir, $dev;
    open (my $fh, '>>', $file);
    print $fh "$router dev $dev \n";
    print $fh "default via $router dev $dev \n";
    close ($fh);
}


my $out = '';
my @routes = $rdb->get_all_by_prop( type => 'static');
my $green = $idb->green()->key;
foreach my $network (@routes) {
    my $cidr = $network->key;
    # Skip anything we don't know how to or don't need to route
    my $router = $network->prop('Router') || next;
    my $device = $network->prop('Device') || '';
    my $metric = $network->prop('Metric') || '';
    my $write_static = 1;
    # print "dev: $device router: $router net: ".$network->key." mask: ".$network->prop('Mask')." \n";
    if ($device) {
         if ( $cidr == "0.0.0.0/0" || $cidr == "default" ) {
             write_default_route($router, $device);
         } else {
             my $file = sprintf "%s/route-%s", $output_dir, $device;
             write_route($file, $cidr, $router, $device, $metric);
         }
    } else { # write to the first green
        my $file = sprintf "%s/route-%s", $output_dir, $green;
        write_route($file, $cidr, $router, '', $metric);
    }
}



sub _write_config_file() {
    my %defaults = (
        'onboot' => 'yes',
        'bootproto' => 'none',
        'nm_controlled' => 'no',
        'userctl' => 'no',
    );
    my ($i) = @_;
    my $file = sprintf "%s/ifcfg-%s", $output_dir, $i->key;
    my $out = sprintf "DEVICE=%s\n",  $i->key;
    my %props = $i->props;
    my $role = $props{'role'} || '';    

    if($role eq '') {
        return;
    }

    if($role eq 'slave') {
        $defaults{'slave'} = 'yes';
    }
    if($props{'type'} eq 'vlan') {
        $defaults{'vlan'} = 'yes';
    }

    my $serverIsGateway = scalar $idb->red() > 0;
    my $roleWithGatewayAllowed = $serverIsGateway ? 'red' : 'green';

    if($role ne $roleWithGatewayAllowed) {
        delete($props{'gateway'});
    }

    if($props{'bootproto'} eq 'dhcp') {
        delete($props{'ipaddr'}); # not needed
        delete($props{'netmask'});
        delete($props{'gateway'});
        $defaults{'persistent_dhclient'} = 'y'; # always renew DHCP lease
        $defaults{'peerdns'} = 'no'; # do not overwrite /etc/resolv.conf
    } elsif($props{'bootproto'} eq 'static') {
        $props{'bootproto'} = 'none'; # replace "static" word with "none"
    }

    # Apply default values:
    foreach(keys %defaults) {
        if( ! defined $props{$_} ) {
            $props{$_} = $defaults{$_};
        }
    }

    my @bondopts = ();

    foreach my $prop (sort { $a cmp $b } keys %props) {
        if($prop eq 'role' || $prop =~ m/^Fw/) {
            next; # skip role and any prop starting with "Fw"
        }
        my $val = $props{$prop};
        if($prop =~ m/^BondOpt(.+)$/) {
            my $key = lc($1);
            # accumulate BondOpt props for subsequent emission
            push @bondopts, $key, $val;
            if($key eq 'mode') {
                # prepend default values for active-backup mode
                unshift @bondopts, 'miimon', '100'; # 100ms
            }
            next;
        }
        $val = ucfirst($val) unless ($prop ne 'type');  #first letter of type must be capitalized
        $out .= sprintf "%s=%s\n", uc($prop), $val;
    }

    if(@bondopts) {
        my %BO = (@bondopts);
        $out .= "BONDING_OPTS=\"" . (join(" ", map { $_ . '=' . $BO{$_} } keys %BO)) . "\"\n";
    }

    open (my $fh, '>', $file);
    print $fh $out; 
    close ($fh);
}

